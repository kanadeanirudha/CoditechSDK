@model GeneralPersonAddressViewModel
@{
    Layout = null;
    DropdownViewModel countryDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.Country.ToString(), DropdownName = "GeneralCountryMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralCountryMasterId), ChangeEvent = $"User.GetRegionListByCountryId('{Model.AddressTypeEnum}')", ClassName = $"GeneralCountryMasterId_{Model.AddressTypeEnum}" };
    DropdownViewModel regionDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.Region.ToString(), DropdownName = "GeneralRegionMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralRegionMasterId), Parameter = Convert.ToString(Model.GeneralCountryMasterId), ChangeEvent = $"User.GetCityListByRegionId('{Model.AddressTypeEnum}')", ClassName = $"GeneralRegionMasterId_{Model.AddressTypeEnum}" };
    DropdownViewModel cityDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.City.ToString(), DropdownName = "GeneralCityMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralCityMasterId), Parameter = Convert.ToString(Model.GeneralRegionMasterId), ClassName = $"GeneralCityMasterId_{Model.AddressTypeEnum}" };
}
@using (Html.BeginForm("CreateEditGeneralPersonalAddress", Model.ControllerName, FormMethod.Post, new { id = $"frmGeneralPersonalAddress_{Model.AddressTypeEnum}" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.GeneralPersonAddressId)
    @Html.HiddenFor(m => m.PersonId)
    @Html.HiddenFor(m => m.AddressTypeEnum)
    @Html.HiddenFor(m => m.EntityId)
    @Html.HiddenFor(m => m.EntityType)
    <div class="row">
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.FirstName, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                @Html.ValidationMessageFor(x => x.FirstName)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.MiddleName, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.MiddleName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.LastName, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                @Html.ValidationMessageFor(x => x.LastName)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.EmailAddress, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.EmailAddress, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.EmailAddress)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.PhoneNumber, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.PhoneNumber)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.MobileNumber, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.MobileNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.MobileNumber)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.AddressLine1, new { @class = "form-label required" })
                @Html.TextAreaFor(x => x.AddressLine1, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.AddressLine1)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.AddressLine2, new { @class = "form-label" })
                @Html.TextAreaFor(x => x.AddressLine2, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.AddressLine2)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.GeneralCountryMasterId, new { @class = "form-label required" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", countryDropdown)
                @Html.ValidationMessageFor(x => x.GeneralCountryMasterId, null, new { id = $"errorGeneralCountryMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.GeneralRegionMasterId, new { @class = "form-label required" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", regionDropdown)
                @Html.ValidationMessageFor(x => x.GeneralRegionMasterId, null, new { id = $"errorGeneralRegionMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.GeneralCityMasterId, new { @class = "form-label required" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", cityDropdown)
                @Html.ValidationMessageFor(x => x.GeneralCityMasterId, null, new { id = $"errorGeneralCityMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.Postalcode, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.Postalcode, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Postalcode)
            </div>
        </div>
        @if (Model.AddressTypeEnum == AddressTypeEnum.PermanentAddress.ToString())
        {
            <div class="col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(x => x.IsCorrespondanceAddressSameAsPermanentAddress, new { @class = "form-label" })
                    <div class="form-check">
                        @Html.CheckBoxFor(x => x.IsCorrespondanceAddressSameAsPermanentAddress, new { @class = "form-check-input" })
                    </div>
                </div>
            </div>
        }
        @if (Model.AddressTypeEnum == AddressTypeEnum.BusinessAddress.ToString())
        {
            <div class="col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(x => x.CompanyName, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.CompanyName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.CompanyName)
                </div>
            </div>
        }
    </div>
    <button type="submit" id="saveDraft_@Model.AddressTypeEnum" class="btn btn-success" data-test-selector="linkSave" onclick="User.SaveGeneralPersonalAddress('@Model.AddressTypeEnum'); return false;">
        @AdminResources.LabelSave
    </button>
}
