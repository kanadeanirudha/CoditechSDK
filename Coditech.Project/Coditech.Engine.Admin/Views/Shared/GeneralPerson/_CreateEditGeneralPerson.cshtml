@model GeneralPersonViewModel
@{
    Layout = null;
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
}

@Html.AntiForgeryToken()
@Html.HiddenFor(m => m.PersonId)
@Html.HiddenFor(m => m.PhotoMediaId)
@Html.HiddenFor(m => m.PhotoMediaFileName, new { id = "PhotoMediaFileName" })
@Html.HiddenFor(m => m.PhotoMediaPath, new { id = "PhotoMediaPath" })
@Html.HiddenFor(m => m.Custom1)
@Html.HiddenFor(m => m.Custom2)
@Html.HiddenFor(m => m.Custom3)
@Html.HiddenFor(m => m.Custom4)
@Html.HiddenFor(m => m.Custom5)
<div class="row">
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.PersonTitle, new { @class = "form-label required" })
            @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
       {
           DropdownSelectedValue = Model.PersonTitle ?? string.Empty,
           DropdownName = "PersonTitle",
           GroupCode = DropdownTypeEnum.Title.ToString(),
           IsTextValueSame = true,
           IsRequired = true,
           IsStringProperty = true
       })
            @Html.ValidationMessageFor(x => x.PersonTitle)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.FirstName, new { @class = "form-label required" })
            @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
            @Html.ValidationMessageFor(x => x.FirstName)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.MiddleName, new { @class = "form-label" })
            @Html.TextBoxFor(x => x.MiddleName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
            @Html.ValidationMessageFor(x => x.MiddleName)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.LastName, new { @class = "form-label required" })
            @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
            @Html.ValidationMessageFor(x => x.LastName)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.GenderEnumId, new { @class = "form-label required" })
            @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
       {
           DropdownSelectedValue = Model.GenderEnumId.ToString(),
           DropdownName = "GenderEnumId",
           GroupCode = DropdownTypeEnum.Gender.ToString()
       })   @Html.ValidationMessageFor(x => x.GenderEnumId)
        </div>
    </div>
    <div class="col-lg-2">
        <div class="mb-3">
            @Html.LabelFor(x => x.DateOfBirth, new { @class = "form-label" })
            @Html.TextBoxFor(x => x.DateOfBirth, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control", @readonly = "true" })
            @Html.ValidationMessageFor(x => x.DateOfBirth)
        </div>
    </div>
    <div class="col-lg-1">
        <div class="mb-3">
            @Html.LabelFor(x => x.Age, new { @class = "form-label" })
            @if (Model.PersonId > 0)
            {
                @Html.TextBoxFor(x => x.Age, new { @class = "form-control", @readonly = "true", onkeypress = "return CoditechCommon.ValidNumeric()" })
            }
            else
            {
                @Html.TextBoxFor(x => x.Age, new { @class = "form-control", onkeypress = "return CoditechCommon.ValidNumeric()" })
            }
            @Html.ValidationMessageFor(x => x.Age)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.AnniversaryDate, new { @class = "form-label" })
            @Html.TextBoxFor(x => x.AnniversaryDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control", @readonly = "true" })
            @Html.ValidationMessageFor(x => x.AnniversaryDate)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.EmailId, new { @class = "form-label"})
            @Html.TextBoxFor(x => x.EmailId, new { @class = "form-control", onkeypress = "return CoditechCommon.AvoidSpacing()" })
            @Html.ValidationMessageFor(x => x.EmailId)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3 row">
            <div class="col-lg-4">
                @Html.LabelFor(x => x.CallingCode, new { @class = "form-label required" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
           {
               DropdownType = DropdownTypeEnum.CallingCode.ToString(),
               DropdownName = "CallingCode",
               DropdownSelectedValue = Model.CallingCode,
               IsRequired = true
           })
                @Html.ValidationMessageFor(x => x.CallingCode)
            </div>
            <div class="col-lg-8">
                @Html.LabelFor(x => x.MobileNumber, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.MobileNumber, new { @class = "form-control", onkeypress = "return CoditechCommon.ValidNumeric()" })
                @Html.ValidationMessageFor(x => x.MobileNumber)
            </div>
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.PhoneNumber, new { @class = "form-label" })
            @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.PhoneNumber)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.EmergencyContact, new { @class = "form-label" })
            @Html.TextBoxFor(x => x.EmergencyContact, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.EmergencyContact)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.MaritalStatus, new { @class = "form-label" })
            @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
       {
           DropdownType = DropdownTypeEnum.MaritalStatus.ToString(),
           DropdownName = "MaritalStatus",
           DropdownSelectedValue = Model.MaritalStatus ?? string.Empty,
       })
            @Html.ValidationMessageFor(x => x.MaritalStatus)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.GeneralNationalityMasterId, new { @class = "form-label required" })
            @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
       {
           DropdownType = DropdownTypeEnum.Nationality.ToString(),
           DropdownName = "GeneralNationalityMasterId",
           DropdownSelectedValue = Model.GeneralNationalityMasterId
            .ToString()
       })
            @Html.ValidationMessageFor(x => x.GeneralNationalityMasterId)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.BloodGroup, new { @class = "form-label" })
            @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
       {
           DropdownType = DropdownTypeEnum.BloodGroups.ToString(),
           DropdownName = "BloodGroup",
           DropdownSelectedValue = Model.BloodGroup ?? string.Empty,
       })
            @Html.ValidationMessageFor(x => x.BloodGroup)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.IndentificationEnumId, new { @class = "form-label" })
            @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
       {
           DropdownSelectedValue = Model.IndentificationEnumId
            .ToString(),
           DropdownName = "IndentificationEnumId",
           GroupCode = DropdownTypeEnum.IndentificationType.ToString(),
           IsRequired = false
       })   @Html.ValidationMessageFor(x => x.IndentificationEnumId)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.IndentificationNumber, new { @class = "form-label" })
            @Html.TextBoxFor(x => x.IndentificationNumber, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.IndentificationNumber)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.BirthMark, new { @class = "form-label" })
            @Html.TextBoxFor(x => x.BirthMark, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.BirthMark)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.AttendanceIntegrationId, new { @class = "form-label" })
            @Html.TextBoxFor(x => x.AttendanceIntegrationId, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.AttendanceIntegrationId)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.GeneralOccupationMasterId, new { @class = "form-label" })
            @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
       {
           DropdownType = DropdownTypeEnum.Occupation.ToString(),
           DropdownName = "GeneralOccupationMasterId",
           DropdownSelectedValue = Model.GeneralOccupationMasterId.ToString(),
           IsRequired = false
       })
            @Html.ValidationMessageFor(x => x.GeneralOccupationMasterId)
        </div>
    </div>
    <div class="col-lg-3">
        <div class="mb-3">
            @Html.LabelFor(x => x.PhotoMediaId, new { @class = "form-label" })
            <input type="file" id="imageUpload" class="form-control" />
            <img id="imagePreview" src="#" alt="Uploaded Image" style="display:none;width:100px;height:100px;margin-top:10px;" />
        </div>
    </div>

</div>
<button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

        var photoMediaPath = $('#PhotoMediaPath').val();
        if (!(photoMediaPath === '' || photoMediaPath === null)) {
            $('#imagePreview').attr('src', $('#PhotoMediaPath').val()).show();
        }

        $('#imageUpload').change(function () {
            var formData = new FormData();
            var fileInput = $('#imageUpload')[0];
            $("#notificationDivId").hide();
            if (fileInput.files.length > 0) {
                CoditechCommon.ShowLodder();
                formData.append('files', fileInput.files[0]);
                $.ajax({
                    url: '/GeneralCommon/UploadMedia',  // Ensure this matches the route
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if(response.status == true||response.status == "true"){
                            $('#imagePreview').attr('src', response.imageUrl).show();
                            $('input[name="PhotoMediaId"]').val(response.photoMediaId);
                        }
                        else {
                            CoditechNotification.DisplayNotificationMessage(response.message, "error")
                        }
                        CoditechCommon.HideLodder();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error('Error uploading file:', textStatus, errorThrown);
                        CoditechCommon.HideLodder();
                    }
                });
            }
        });

        $(function () {
            $("#DateOfBirth").datepicker({
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+100",
                dateFormat: "@AdminGeneralHelper.DateFormatForCalendar()",
                language: "en",
                autoSize: true,
                gotoCurrent: true,
                clearBtn: true,
                showButtonPanel: true,
                closeText: 'Clear',
                onClose: function (dateText, inst) {
                    if ($(window.event.srcElement).hasClass('ui-datepicker-close')) {
                        document.getElementById(this.id).value = '';
                    }
                },
                minDate: "-80Y",
                maxDate: new Date()
            });

            $('#DateOfBirth').change(function () {
                var now = new Date();
                var past = new Date($('#DateOfBirth').val());

                var nowYear = now.getFullYear();
                var pastYear = past.getFullYear();

                var age = nowYear - pastYear;
                $('#Age').val(age);
            })

            function calculateAge(dob) {
                var now = new Date();
                var dobDate = new Date(dob);
                var age = now.getFullYear() - dobDate.getFullYear();
                var monthDiff = now.getMonth() - dobDate.getMonth();
                if (monthDiff < 0 || (monthDiff === 0 && now.getDate() < dobDate.getDate())) {
                    age--;
                }
                return age;
            }

            function calculateDOB(age) {
                var now = new Date();
                var birthYear = now.getFullYear() - age;
                return new Date(birthYear, 0, 1);
            }

            $('#Age').change(function () {
                var age = $('#Age').val();

                var dob = calculateDOB(age);
                $('#DateOfBirth').datepicker('setDate', dob);
            });


            $("#AnniversaryDate").datepicker({
                changeMonth: true,
                changeYear: true,
                dateFormat: "@AdminGeneralHelper.DateFormatForCalendar()",
                language: "en",
                autoSize: true,
                gotoCurrent: true,
                clearBtn: true,
                showButtonPanel: true,
                closeText: 'Clear',
                onClose: function (dateText, inst) {
                    if ($(window.event.srcElement).hasClass('ui-datepicker-close')) {
                        document.getElementById(this.id).value = '';
                    }
                },
                minDate: "-80Y",
                maxDate: new Date()
            });
        });
    });
</script>



