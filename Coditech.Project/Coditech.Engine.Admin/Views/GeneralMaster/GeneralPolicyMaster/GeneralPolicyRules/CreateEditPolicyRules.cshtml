@model GeneralPolicyRulesViewModel
@{
    ViewBag.Title = Model.GeneralPolicyRulesId > 0 ? "Update General Policy Rule" : "Add General Policy Rule";
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    string css = Model.GeneralPolicyRulesId > 0 || !string.IsNullOrWhiteSpace(Model.PolicyCode) ? "col-lg-10" : "col-lg-12";
}
<!-- Page Content-->
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            @if (!string.IsNullOrWhiteSpace(Model.PolicyCode))
            { 
                <div class="col-lg-2">
                    @Html.Partial("~/Views/GeneralMaster/GeneralPolicyMaster/_GeneralPolicySidePannel.cshtml", Model.PolicyCode)
                </div>
             } 
            <div class="@css">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                @if (Model.GeneralPolicyRulesId > 0)
                                {
                                    <h4 class="card-title">Update General Policy Rule</h4>
                                }
                                else
                                {
                                    <h4 class="card-title">Create General Policy Rule</h4>
                                }
                            </div><!--end col-->
                        </div>  <!--end row-->
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post))
                        {
                            @Html.HiddenFor(m => m.PolicyCode)
                            @Html.HiddenFor(m => m.GeneralPolicyRulesId)
                            @Html.HiddenFor(m => m.GeneralPolicyDetailId)
                            @Html.HiddenFor(m => m.PolicyApplicableStatus)
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.PolicyCode, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.PolicyCode, new { @class = "form-control", @readonly = "readonly", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
                                        @Html.ValidationMessageFor(x => x.PolicyCode)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.PolicyRange, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.PolicyRange, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PolicyRange)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.RangeSeparateBy, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.RangeSeparateBy, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.RangeSeparateBy)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.PolicyAnsType, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.PolicyAnsType, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PolicyAnsType)
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.PolicyQuestionDescription, new { @class = "form-label required" })
                                        @Html.TextAreaFor(x => x.PolicyQuestionDescription, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PolicyQuestionDescription)
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.PolicyDefaultAnswer, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.PolicyDefaultAnswer, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PolicyDefaultAnswer)
                                    </div>
                                </div>
                                @if (Model.PolicyApplicableStatus == PolicyApplicableStatusEnum.General.ToString())
                                {
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="mb-3">
                                                @Html.LabelFor(x => x.PolicyAnswered, new { @class = "form-label" })
                                                @Html.TextAreaFor(x => x.PolicyAnswered, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(x => x.PolicyAnswered)
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="mb-3">
                                                @Html.LabelFor(x => x.ApplicableFromDate, new { @class = "form-label" })
                                                @Html.TextBoxFor(x => x.ApplicableFromDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control", @id = "ApplicableFromDate" })
                                                @Html.ValidationMessageFor(x => x.ApplicableFromDate)
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="mb-3">
                                                @Html.LabelFor(x => x.ApplicableUptoDate, new { @class = "form-label" })
                                                @Html.TextBoxFor(x => x.ApplicableUptoDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control", @id = "ApplicableUptoDate" })
                                                @Html.ValidationMessageFor(x => x.ApplicableUptoDate)
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>
                            <a href="../@controllerName/GetGeneralPolicyRulesList?policyCode=@Model.PolicyCode" class="btn btn-secondary"><i class="ft-x"></i>@AdminResources.LabelCancel</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $("#ApplicableFromDate").datepicker({
                changeMonth: true,
                changeYear: true,
                showMonthAfterYear: false,
                dateFormat: "@AdminGeneralHelper.DateFormatForCalendar()",
                language: "en",
                autoSize: true,
                showButtonPanel: true,
                yearRange: "2024:2027",
                closeText: "Clear",
                minDate: new Date(2022, 0, 1),
                maxDate: new Date(2035, 11, 31),
                onSelect: function (selectedDate) {
                    var fromDate = $(this).datepicker("getDate");
                    $("#ApplicableUptoDate").datepicker("option", "minDate", fromDate);
                }
            });
            $("#ApplicableUptoDate").datepicker({
                changeMonth: true,
                changeYear: true,
                dateFormat: "@AdminGeneralHelper.DateFormatForCalendar()",
                language: "en",
                autoSize: true,
                yearRange: "2025:2027",
                minDate: new Date(2022, 0, 1),
                maxDate: new Date(2035, 11, 31)
            });
        });
    </script>
}