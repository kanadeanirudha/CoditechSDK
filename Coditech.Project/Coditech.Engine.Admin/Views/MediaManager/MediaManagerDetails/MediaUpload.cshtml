@model MediaManagerFolderListViewModel
@{
    ViewBag.Title = "Media Manager";
}
<div id="MediaUpload">
    <div id="DataTablesDivId">
        @Html.Partial("~/Views/MediaManager/MediaManagerDetails/_MediaDetails.cshtml", Model)
    </div>
</div>



@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.0/js/bootstrap.bundle.min.js"></script>
    <script>
        function initializeEventHandlers() {
            // Click event for folder name
            $(".folder-click").click(function () {
                CoditechCommon.ShowLodder();
                // Remove 'active' class from all folder containers
                $(".folder-container").removeClass("active");
                // Add 'active' class to the clicked folder's container
                $(this).closest(".folder-container").addClass("active");

                console.log($(this));
                console.log($(this).data("folder-id"));
                var folderId = $(this).closest(".folder-container").data("folder-id");

                // Load partial view into the container
                $.ajax({
                    url: '@Url.Action("Index", "MediaManager")',
                    type: 'GET',
                    data: { SelectedParameter1: folderId },
                    beforeSend: function () {
                        CoditechCommon.ShowLodder();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        if (xhr.status == "401" || xhr.status == "403") {
                            location.reload();
                        }
                        CoditechNotification.DisplayNotificationMessage("Failed to display record.", "error");
                        CoditechCommon.HideLodder();
                    }
                }).done(function (data) {
                    $("#DataTablesDivId").html(data);
                    initializeEventHandlers();
                }).fail(function (xhr, status, error) {
                    var msg = "Sorry but there was an error: ";
                    $("#DataTablesDivId").html(msg + xhr.status + " " + xhr.statusText);
                }).always(function () {
                    CoditechCommon.HideLodder();
                });

                // alert("Folder name clicked: " + $(this).text().trim());
            });

            // Click event for collapse/expand icons
            $(".collapse-icon").click(function () {
                var folderId = $(this).closest(".nav-link").attr("aria-controls");
                $("#" + folderId).collapse("toggle");

                // Toggle the chevron icons
                $(this).siblings(".collapse-icon").toggle();
                $(this).toggle();
            });

            // Automatically toggle chevron icons based on collapse state
            $('.collapse').on('shown.bs.collapse', function () {
                $(this).prev('.nav-link').find('.mdi-chevron-up').show();
                $(this).prev('.nav-link').find('.mdi-chevron-down').hide();
            }).on('hidden.bs.collapse', function () {
                $(this).prev('.nav-link').find('.mdi-chevron-up').hide();
                $(this).prev('.nav-link').find('.mdi-chevron-down').show();
            });
        }

        $(document).ready(function () {

            var targetNode = $("#DataTablesDivId")[0];

            var config = { childList: true };

            // Callback function to execute when mutations are observed
            var callback = function (mutationsList, observer) {
                mutationsList.forEach(function (mutation) {
                    if (mutation.type === 'childList') {
                        initializeEventHandlers();
                    }
                });
            };

            var observer = new MutationObserver(callback);

            observer.observe(targetNode, config);

            CoditechCommon.ShowLodder();
            initializeEventHandlers(); // Initialize event handlers on page load
            CoditechCommon.HideLodder();
        });

        function showContextMenu(event, folderId, folderName) {
            event.preventDefault();
            $(".dropdown-menu-md").hide();

            const menu = document.getElementById('contextMenu');
            const folderElement = event.currentTarget;
            const folderRect = folderElement.getBoundingClientRect();

            menu.style.top = `${folderRect.bottom + window.scrollY - 120}px`;
            menu.style.left = `${folderRect.left + window.scrollX}px`;
            menu.style.display = 'block';

            document.getElementById('createFolder').onclick = function () {
                openCreateFolderModal(folderId);
                menu.style.display = 'none';
            };

            document.getElementById('deleteFolder').onclick = function () {
                openDeleteFolderModal(folderId);
                menu.style.display = 'none';
            };

            document.getElementById('renameFolder').onclick = function () {
                openRenameFolderModal(folderId, folderName);
                menu.style.display = 'none';
            };

            document.getElementById('moveFolder').onclick = function () {
                openMoveFolderModal(folderId, folderName);
                menu.style.display = 'none';
            };

            document.addEventListener('click', function (event) {
                if (!menu.contains(event.target) && !folderElement.contains(event.target)) {
                    menu.style.display = 'none';
                }
            }, { once: true });
        }

        function openRenameFolderModal(folderId, folderName) {
            $('#renameFolderModal').modal('show');
            $('#renameFolderId').val(folderId);
            $('#oldFolderName').val(folderName);
        }

        function openDeleteFolderModal(folderId) {
            $('#deleteFolderModal').modal('show');
            $('#deleteFolderId').val(folderId);
        }

        function openDeleteFileModal(mediaId, folderId) {
            $('#deleteFileModal').modal('show');
            $('#activeFolderId').val(folderId);
            $('#mediaId').val(mediaId);
        }

        function openMoveFolderModal(folderId, RootFolderName) {
            $('#moveFolderModal').modal('show');
            $('#moveFolderId').val(folderId);
            $('#moveFolderRootFolderNameId').html("").html(RootFolderName);

            CoditechCommon.ShowLodder();
            // Fetch folder structure for the dropdown, excluding the current folder
            $.ajax({
                url: '@Url.Action("GetMoveFolderDropdown", "MediaManager")',
                type: 'GET',
                data: { moveFolderId: folderId },
                success: function (data) {
                    var dropdown = $('#moveFolderDropdown');
                    dropdown.empty();
                    dropdown.append($('<option></option>').attr('value', '').text("Select Destination Folder"));
                    data.forEach(function (folder) {
                        dropdown.append($('<option></option>').attr('value', folder.FolderId).text(folder.FolderName));
                    });
                    CoditechCommon.HideLodder();
                },
                error: function (xhr, status, error) {
                    if (xhr.status == "401" || xhr.status == "403") {
                        location.reload();
                    }
                    console.error("Error fetching folder dropdown: " + error);
                }
            });
        }


        function openCreateFolderModal(folderId) {
            const modal = document.getElementById('createFolderModal');
            modal.querySelector('input[name="rootFolderId"]').value = folderId;
            const bootstrapModal = new bootstrap.Modal(modal);
            bootstrapModal.show();
        }
    </script>
}

<style>
    #contextMenu {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
        z-index: 1000;
        min-width: 150px;
    }

    .modal-footer .btn-danger {
        display: inline-block;
        visibility: visible;
        opacity: 1;
    }
</style>