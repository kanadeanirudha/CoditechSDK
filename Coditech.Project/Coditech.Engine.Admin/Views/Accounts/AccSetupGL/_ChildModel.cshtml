@model AccSetupGLModel
@{

    string formAction = Model.AccSetupGLId == 0 ? "AddChild" : "SaveAccountSetupGL";
    Layout = null;
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    string mode = @Model.AccSetupGLId > 0 ? "edit" : "create";
    DropdownViewModel accSetupGLTypeDropdown = new DropdownViewModel()
            {
                DropdownType = DropdownTypeEnum.AccSetupGLType.ToString(),
                DropdownName = "AccSetupGLTypeId",
                IsDisabled = mode == "edit",
                DropdownSelectedValue = Convert.ToString(Model.AccSetupGLTypeId)
            };
    DropdownViewModel userTypeDropdown = new DropdownViewModel()
            {
                DropdownType = DropdownTypeEnum.UserTypeList.ToString(),
                DropdownName = "UserTypeId",
                DropdownSelectedValue = Convert.ToString(Model.UserTypeId),
                IsDisabled = mode == "edit",
                ExcludedValues = new string[] { "Admin", "Branch","Gym Member","Patient","Trainee"}
            };


}
@using (Html.BeginForm(formAction, controllerName, FormMethod.Post, new { id = mode == "create" ? "addChildForm" : "addForm", data_mode = mode }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.ParentAccSetupGLId)
    @Html.HiddenFor(m => m.AccSetupCategoryId)
    @Html.HiddenFor(m => m.AccSetupBalancesheetId)
    @Html.HiddenFor(m => m.AccSetupBalanceSheetTypeId)
    @Html.HiddenFor(m => m.SelectedCentreCode)
    <input type="hidden" name="AccSetupGLId" value="@Model.AccSetupGLId" />
    <div class="modal fade" id="addChildModal" tabindex="-1" aria-hidden="true">
        @Html.HiddenFor(m => m.ParentAccSetupGLId)
        @Html.HiddenFor(m => m.AccSetupCategoryId)
        @Html.HiddenFor(m => m.AccSetupBalancesheetId)
        @Html.HiddenFor(m => m.AccSetupBalanceSheetTypeId)
        @Html.HiddenFor(m => m.SelectedCentreCode)
        <div class="modal-dialog modal-lg">
            <div class="modal-content shadow-lg rounded-3">
                <div class="modal-header text-white" style="background-color: #0c213a !important;">
                    <h5 class="modal-title fw-bold">
                        @(mode == "edit" ? "Edit Account" : "New Account")
                    </h5>
                    <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <!-- GL Type Dropdown -->
                    <div class="flex flex-col space-y-2">
                        @Html.LabelFor(x => x.AccSetupGLTypeId, new { @class = "form-label required" })
                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", accSetupGLTypeDropdown)
                        @Html.ValidationMessageFor(x => x.AccSetupGLTypeId, "", new { @class = "text-danger" })
                    </div>

                    <!-- User Type Dropdown -->
                    <div class="flex flex-col space-y-2">
                        @Html.LabelFor(x => x.UserTypeId, new { @class = "form-label required" })
                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", userTypeDropdown)
                        @Html.ValidationMessageFor(x => x.UserTypeId, "", new { @class = "text-danger" })
                    </div>

                    <!-- GL Name -->
                    <div class="flex flex-col space-y-2">
                        @Html.LabelFor(x => x.GLName, new { @class = "form-label required" })
                        @Html.TextBoxFor(x => x.GLName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                        <span class="text-danger" data-valmsg-for="GLName"></span>
                    </div>

                    <!-- GL Code -->
                    <div class="flex flex-col space-y-2">
                        @Html.LabelFor(x => x.GLCode, new { @class = "form-label required" })
                        @Html.TextBoxFor(x => x.GLCode, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                        <span class="text-danger" data-valmsg-for="GLCode"></span>
                    </div>

                    <!-- Is Group -->
                    <div class="flex flex-col space-y-2">
                        @Html.LabelFor(x => x.IsGroup, new { @class = "form-label" })
                        <div class="form-check">
                            @Html.CheckBoxFor(x => x.IsGroup, new { @class = "form-check-input" })
                        </div>
                    </div>

                    <!-- Bank Container -->
                    <div id="bankContainer" class="mt-4"></div>
                </div>

                <!-- ✅ Submit + Cancel Buttons -->
                <div class="modal-footer bg-light d-flex justify-content-between align-items-center">
                    <button type="submit" class="btn btn-success">Submit</button>
                    <button type="button" class="btn btn btn-secondary " data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
