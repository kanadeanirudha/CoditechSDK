@model OrganisationCentrePrintingFormatViewModel
@{
    ViewBag.Title = "Organisation Centre Printing Format";
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
}
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            @if (Model.OrganisationCentreMasterId > 0)
            {
                <div class="col-lg-2">
                    @Html.Partial("~/Views/Organisation/OrganisationCentre/_OrganisationCentreSidePannel.cshtml", Model.OrganisationCentreMasterId.ToString())
                </div>
            }
            <div class="col-lg-10">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                <h4 class="card-title">Organisation Centre Printing Format</h4>
                            </div><!--end col-->
                        </div><!--end row-->
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post))
                        {
                            @Html.HiddenFor(m => m.OrganisationCentrePrintingFormatId)
                            @Html.HiddenFor(m => m.OrganisationCentreMasterId)
                            @Html.HiddenFor(m => m.LogoMediaId)
                            @Html.HiddenFor(m => m.SignatureMediaId)
                            @Html.HiddenFor(m => m.LogoMediaPath)
                            @Html.HiddenFor(m => m.SignatureMediaPath)
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.CentreName, new { @class = "form-label" })

                                        @Html.TextBoxFor(x => x.CentreName, new { @class = "form-control", @disabled = "disabled" })
                                        @Html.ValidationMessageFor(x => x.CentreName)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.CentreCode, new { @class = "form-label required" })

                                        @Html.TextBoxFor(x => x.CentreCode, new { @class = "form-control", @disabled = "disabled" })
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.PrintingLine1, new { @class = "form-label" })

                                        @Html.TextAreaFor(x => x.PrintingLine1, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PrintingLine1)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.PrintingLine2, new { @class = "form-label" })

                                        @Html.TextAreaFor(x => x.PrintingLine2, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PrintingLine2)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.PrintingLine3, new { @class = "form-label" })
                                        @Html.TextAreaFor(x => x.PrintingLine3, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PrintingLine3)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.PrintingLine4, new { @class = "form-label" })
                                        @Html.TextAreaFor(x => x.PrintingLine4, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PrintingLine4)
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <div class="mb-4">
                                        @Html.LabelFor(x => x.PrintingLinebelowLogo, new { @class = "form-label" })
                                        @Html.TextBoxFor(x => x.PrintingLinebelowLogo, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PrintingLinebelowLogo)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.LogoMediaId, new { @class = "form-label" })
                                        <input type="file" id="logoUpload" class="form-control" />
                                        <img id="logoPreview" src="#" alt="Uploaded Logo" style="display:none;width:100px;height:100px;margin-top:10px;" />
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.SignatureMediaId, new { @class = "form-label" })
                                        <input type="file" id="signatureUpload" class="form-control" />
                                        <img id="signaturePreview" src="#" alt="Uploaded Signature" style="display:none;width:100px;height:100px;margin-top:10px;" />
                                    </div>
                                </div>
                            </div>
                            <br />
                            <button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>
                            <a href="../@controllerName/List" class="btn btn-secondary"><i class="ft-x"></i>@AdminResources.LabelCancel</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

        var logoMediaPath = $('#LogoMediaPath').val();
        if (!(logoMediaPath === '' || logoMediaPath === null)) {
            $('#logoPreview').attr('src', $('#LogoMediaPath').val()).show();
        }

        $('#logoUpload').change(function () {
            var formData = new FormData();
            var fileInput = $('#logoUpload')[0];
            $("#notificationDivId").hide();
            if (fileInput.files.length > 0) {
                CoditechCommon.ShowLodder();
                formData.append('files', fileInput.files[0]);
                $.ajax({
                    url: '/GeneralCommon/UploadMedia',  // Ensure this matches the route
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.status == true || response.status == "true") {
                            $('#logoPreview').attr('src', response.imageUrl).show();
                            $('input[name="LogoMediaId"]').val(response.photoMediaId);
                        }
                        else {
                            CoditechNotification.DisplayNotificationMessage(response.message, "error")
                        }
                        CoditechCommon.HideLodder();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error('Error uploading file:', textStatus, errorThrown);
                        CoditechCommon.HideLodder();
                    }
                });
            }
        });

        var signatureMediaPath = $('#SignatureMediaPath').val();
        if (!(signatureMediaPath === '' || signatureMediaPath === null)) {
            $('#signaturePreview').attr('src', $('#SignatureMediaPath').val()).show();
        }

        $('#signatureUpload').change(function () {
            var formData = new FormData();
            var fileInput = $('#signatureUpload')[0];
            $("#notificationDivId").hide();
            if (fileInput.files.length > 0) {
                CoditechCommon.ShowLodder();
                formData.append('files', fileInput.files[0]);
                $.ajax({
                    url: '/GeneralCommon/UploadMedia',  // Ensure this matches the route
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.status == true || response.status == "true") {
                            $('#signaturePreview').attr('src', response.imageUrl).show();
                            $('input[name="SignatureMediaId"]').val(response.photoMediaId);
                        }
                        else {
                            CoditechNotification.DisplayNotificationMessage(response.message, "error")
                        }
                        CoditechCommon.HideLodder();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error('Error uploading file:', textStatus, errorThrown);
                        CoditechCommon.HideLodder();
                    }
                });
            }
        });

    });
</script>



