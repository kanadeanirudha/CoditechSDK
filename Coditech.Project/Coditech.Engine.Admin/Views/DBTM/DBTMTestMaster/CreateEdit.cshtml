@model DBTMTestViewModel
@{
    ViewBag.Title = Model.DBTMTestMasterId > 0 ? "Update DBTM Test" : "Add DBTM Test";
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
}
<!-- Page Content-->
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                @if (Model.DBTMTestMasterId > 0)
                                {
                                    <h4 class="card-title">Update DBTM Test</h4>
                                }
                                else
                                {
                                    <h4 class="card-title">Add DBTM Test</h4>
                                }
                            </div><!--end col-->
                        </div>  <!--end row-->
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post))
                        {
                            @Html.HiddenFor(m => m.DBTMTestMasterId)
                            @Html.HiddenFor(m => m.TestMediaId)
                            @Html.HiddenFor(m => m.TestMediaPath)
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.DBTMActivityCategoryId, new { @class = "form-label" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
                               {
                                   DropdownType = DropdownCustomTypeEnum.DBTMActivityCategory.ToString(),
                                   DropdownName = "DBTMActivityCategoryId",
                                   DropdownSelectedValue = Model.DBTMActivityCategoryId.ToString(),
                                   IsRequired = false,
                                   IsCustomDropdown = true
                               })
                                        @Html.ValidationMessageFor(x => x.DBTMActivityCategoryId, null)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.TestName, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.TestName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.TestName)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.TestCode, new { @class = "form-label required" })
                                        @if (Model.DBTMTestMasterId > 0)
                                        {
                                            @Html.TextBoxFor(x => x.TestCode, new { @class = "form-control", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(x => x.TestCode, new { @class = "form-control", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
                                        }
                                        @Html.ValidationMessageFor(x => x.TestCode)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3 multiselect-dropdown">
                                        @Html.LabelFor(x => x.DBTMSelectedTestParameter, new { @class = "form-label required" })
                                        @Html.ListBoxFor(x => x.DBTMSelectedTestParameter, new SelectList(Model.DBTMTestParameterList, "Value", "Text"), new { @class = "selectpicker form-control", multiple = "multiple" })
                                        @Html.ValidationMessageFor(x => x.DBTMSelectedTestParameter)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3 multiselect-dropdown">
                                        @Html.LabelFor(x => x.DBTMSelectedTestCalculation, new { @class = "form-label required" })
                                        @Html.ListBoxFor(x => x.DBTMSelectedTestCalculation, new SelectList(Model.DBTMTestCalculationList, "Value", "Text"), new { @class = "selectpicker form-control", multiple = "multiple" })
                                        @Html.ValidationMessageFor(x => x.DBTMSelectedTestCalculation)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.MinimunPairedDevice, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.MinimunPairedDevice, new { @class = "form-control", @onkeypress = "return CoditechCommon.ValidNumeric()", @maxlength = "50" })
                                        @Html.ValidationMessageFor(x => x.MinimunPairedDevice)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.LapDistance, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.LapDistance, new { @class = "form-control", @onkeypress = "return CoditechCommon.ValidNumeric()", @maxlength = "999" })
                                        @Html.ValidationMessageFor(x => x.LapDistance)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.IsLapDistanceChange, new { @class = "form-label" })
                                        <div class="form-check">
                                            @Html.CheckBoxFor(x => x.IsLapDistanceChange, new { @class = "form-check-input" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.IsMultiTest, new { @class = "form-label" })
                                        <div class="form-check">
                                            @Html.CheckBoxFor(x => x.IsMultiTest, new { @class = "form-check-input" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.IsActive, new { @class = "form-label" })
                                        <div class="form-check">
                                            @Html.CheckBoxFor(x => x.IsActive, new { @class = "form-check-input" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.TestInstructions, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_HTMLEditor.cshtml", new HTMLEditorViewModel()
                               {
                                   EditorName = "TestInstructions",
                                   EditorValue = Model.TestInstructions
                               })
                                        @Html.ValidationMessageFor(x => x.TestInstructions)
                                    </div>
                                </div>

                                <div class="col-lg-6">
                                    <div class="mb-6">
                                        @Html.LabelFor(x => x.TestMediaId, new { @class = "form-label required" })
                                        <input type="file" id="testUpload" class="form-control" />
                                        <img id="testPreview" src="#" alt="Uploaded Test" style="display:none;width:100px;height:100px;margin-top:10px;" />
                                    </div>
                                </div>
                            </div>
                            <br />
                            <button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>
                            <a href="../@controllerName/List" class="btn btn-secondary"><i class="ft-x"></i>@AdminResources.LabelCancel</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
@section scripts {
    <script type="text/javascript">
        var testMediaPath = $('#TestMediaPath').val();
        if (!(testMediaPath === '' || testMediaPath === null)) {
            $('#testPreview').attr('src', $('#TestMediaPath').val()).show();
        }

        $('#testUpload').change(function () {
            var formData = new FormData();
            var fileInput = $('#testUpload')[0];
            $("#notificationDivId").hide();
            if (fileInput.files.length > 0) {
                CoditechCommon.ShowLodder();
                formData.append('files', fileInput.files[0]);
                $.ajax({
                    url: '/GeneralCommon/UploadMedia',  // Ensure this matches the route
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.status == true || response.status == "true") {
                            $('#testPreview').attr('src', response.imageUrl).show();
                            $('input[name="TestMediaId"]').val(response.photoMediaId);
                        }
                        else {
                            CoditechNotification.DisplayNotificationMessage(response.message, "error")
                        }
                        CoditechCommon.HideLodder();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error('Error uploading file:', textStatus, errorThrown);
                        CoditechCommon.HideLodder();
                    }
                });
            }
        });
    </script>
}












